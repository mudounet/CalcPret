package ClearquestCommon;use strict;use warnings;use Log::Log4perl qw(:easy);use Term::ReadKey;use vars qw($VERSION @EXPORT_OK @ISA @EXPORT);require Exporter;@ISA       = qw(Exporter);@EXPORT    = qw();@EXPORT_OK = qw(checkPasswordAndAskIfIncorrect getAnswer buildReleasesList getLatestRelease);$VERSION = sprintf('%d.%02d', (q$Revision: 1.15 $ =~ /\d+/g));sub checkPasswordAndAskIfIncorrect {	my ($Clearquest_password) = @_;		if (ref($Clearquest_password)) {		DEBUG "No credential given. Asking one for current session.";				$Clearquest_password = getAnswer("Insert hereafter password for current session : ", -HIDDEN_TEXT => 1);		INFO("Clearquest password was defined for current session.");	}	return $Clearquest_password;}sub getAnswer {	my $text = shift;	my %options = @_;		my $hidden = $options{-HIDDEN_TEXT};		$| = 1;	print $text;	my $answer = '';	ReadMode('noecho') if $hidden;			$answer = ReadLine(0);	chomp $answer;	print "\n";	ReadMode 'normal' if $hidden;			return $answer;}sub buildReleasesList {	my $file = shift;	$file = getScriptDirectory().$file;		ERROR "List of releases cannot be retrieved in \"$file\"" and return undef unless -r $file;	DEBUG "File of releases (\"$file\") has been found";	open FILE,"$file" or return;	DEBUG "File of releases (\"$file\") has been opened successfully";	my @orderedReleases;	foreach my $release (<FILE>) {		$release =~ s/\s*(\S*)\s*/$1/;		DEBUG "Found release called \"$release\"";		push (@orderedReleases, $release);	}	close FILE;	my $i = 1;	my %equivTable = map { $_ => $i++ } @orderedReleases;		my %releaseList;	$releaseList{hash} = \%equivTable;	$releaseList{array} = \@orderedReleases;	$releaseList{count} = scalar(@orderedReleases);		return \%releaseList;}sub getLatestRelease {	my $refReleaseList = shift;	my $index = $refReleaseList->{count};	foreach my $release (@_) {		LOGDIE "Release \"$release\" is an unknown release" unless $refReleaseList->{hash}{$release};		$index = $refReleaseList->{hash}{$release} if $refReleaseList->{hash}{$release}  < $index;	}	return $refReleaseList->{array}->[$index-1];}1;